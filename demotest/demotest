#!/usr/bin/env python
import os
import sys
import subprocess
import difflib
from urllib import request
from pathlib import Path
from zipfile import ZipFile
from argparse import ArgumentParser

import yaml
from joblib import Parallel, delayed

def download(url):
    response = request.urlopen(url)
    with open('tmp', 'wb') as stream:
        stream.write(response.read())
    print('downloaded ' + url)
    return 'tmp'

def extract(zipname, filename):
    with ZipFile(zipname, 'r') as zf:
        with zf.open(filename) as stream:
            with open(Path('extract', filename), 'wb') as out:
                out.write(stream.read())

def download_and_extract(record):
    if not Path('extract', record['wad']).exists():
        zipname = download(record['wad_url'])
        extract(zipname, record['wad'])
        if 'deh' in record:
            extract(zipname, record['deh'])
        os.remove(zipname)

    if not Path('extract', record['demo']).exists():
        zipname = download(record['demo_url'])
        extract(zipname, record['demo'])
        os.remove(zipname)

def build_command_line(port, record):
    cmd = []
    cmd += [Path(port), '-nodraw', '-noblit', '-nosound', '-nogui', '-quiet']
    cmd += ['-iwad', Path('extract', 'miniwad.wad')]
    cmd += ['-file', Path('extract', record['wad'])]
    if 'deh' in record:
        cmd += ['-deh', Path('extract', record['deh'])]
    if 'gameversion' in record:
        cmd += ['-gameversion', record['gameversion']]
    cmd += ['-timedemo', Path('extract', record['demo'])]
    cmd += ['-statdump', Path('output', record['output'])]
    return cmd

def run_program(args):
    with open('config.yml', 'r') as stream:
        config = yaml.safe_load(stream)

    extract('miniwad.zip', 'miniwad.wad')

    commands = []

    for record in config:
        download_and_extract(record)
        commands.append(build_command_line(args.source_port, record))

    os.environ["SDL_VIDEODRIVER"] = 'dummy'

    Parallel(n_jobs=args.jobs)(delayed(subprocess.call)(cmd) for cmd in commands)

    error = False

    for record in config:
        name = record['output']
        with open(Path('expected', name), 'r') as f1:
            with open(Path('output', name), 'r') as f2:
                diff = difflib.unified_diff(f1.readlines(), f2.readlines(),
                                            fromfile='a/' + name, tofile='b/' + name)
                for line in diff:
                    error = True
                    sys.stdout.write(line)

    if error:
        sys.exit(1)
    else:
        print("Success.")

if __name__ == "__main__":
    parser = ArgumentParser(description='Execute demos for Doom port in a batch')
    parser.add_argument('--jobs', dest='jobs', default=1, type=int, help='Set the number of jobs')
    parser.add_argument('--port', dest='source_port', default="doom", type=str, help='Path to Doom port')
    args = parser.parse_args()
    run_program(args)
