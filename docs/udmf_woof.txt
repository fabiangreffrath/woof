===============================================================================
Universal Doom Map Format Woof Extensions v0.1 - 2025-09-28

Originally written by James "Quasar" Haley, et al.
Modified to include new features for the Woof UDMF namespace.

    Copyright (c) 2025 Guilherme Miranda.
    Copyright (c) 2009 James Haley.
    Permission is granted to copy, distribute and/or modify this document
    under the terms of the GNU Free Documentation License, Version 1.2
    or any later version published by the Free Software Foundation;
    with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.

===============================================================================


=======================================
Preface
=======================================

When originally designed, the version 1.0 of the UDMF spec defined the features
needed for implementing the namespaces for a basic "Doom" support, including
the properties originally introduced by Boom and MBF. This spec and namespace
push that original minimal feature set into modern compatibility levels and
feature set, while also adding new properties not previously possible with the
binary-based Doom-format.

=======================================
I. Grammar / Syntax
=======================================

No changes from the base UDMF v1.1 specification.

=======================================
II. Implementation Semantics
=======================================

------------------------------------
II.A : Storage and Retrieval of Data
------------------------------------

Any TEXTMAP lump in the "Woof" namespace must be encoded in UTF-8.

-----------------------------------
II.B : Storage Within Archive Files
-----------------------------------

In addition to the base specification's definition of the (HEADER), TEXTMAP and
ENDMAP lumps, this specification defines support for the following lumps:

ZNODES   = Support is required for all of the XGLN/ZGLN, XGL2/ZGL2 & XGL3/ZGL3
           extended node formats.
BLOCKMAP = Standard vanilla Doom blockmap structure. In order to retain demo-
           compatibility, all demo-accurate ports must rebuild the structure
           using the original Boom's rebuilding algorithm.
REJECT   = Standard vanilla Doom reject matrix. If not included, or too short,
           it must be padded with 0x00.

--------------------------------
II.C : Implementation Dependence
--------------------------------

This namespace requires only the support of classic (Doom-style) line actions.
Parameterized (Hexen-style) line actions are NOT supported by this namespace.

=======================================
III. Standardized Fields
=======================================



All boolean fields take the keyword values true and false.

  vertex
  {
    x = <float>; // X coordinate. No valid default.
    y = <float>; // Y coordinate. No valid default.
  }

  linedef
  {
    id = <integer>; // ID of line.

    v1 = <integer>; // Index of first vertex. No valid default.
    v2 = <integer>; // Index of second vertex. No valid default.

    // All flags default to false.
    blocking      = <bool>; // true = line blocks things.
    blockmonsters = <bool>; // true = line blocks monsters.
    twosided      = <bool>; // true = line is 2S.
    dontpegtop    = <bool>; // true = upper texture unpegged.
    dontpegbottom = <bool>; // true = lower texture unpegged.
    secret        = <bool>; // true = drawn as 1S on map.
    blocksound    = <bool>; // true = blocks sound.
    dontdraw      = <bool>; // true = line never drawn on map.
    mapped        = <bool>; // true = always appears on map.

    // BOOM passuse flag.
    passuse       = <bool>; // true = passes use action.

    // MBF21 blocking flags.
    blocklandmonster = <bool>; // true = line blocks grounded monsters.
    blockplayer      = <bool>; // true = line blocks players.

    special = <integer>; // Special. Default = 0.
    arg0    = <integer>; // Special action's target id. Default = 0.

    sidefront = <integer>; // Sidedef 1 index. No valid default.
    sideback  = <integer>; // Sidedef 2 index. Default = -1.

    comment = <string>; // A comment. Implementors should attach no special
                        // semantic meaning to this field.
    }

  sidedef
  {
    offsetx = <integer>; // X Offset. Default = 0.
    offsety = <integer>; // Y Offset. Default = 0.

    texturetop    = <string>; // Upper texture. Default = "-".
    texturemiddle = <string>; // Middle texture. Default = "-".
    texturebottom = <string>; // Lower texture. Default = "-".

    sector = <integer>; // Sector index. No valid default.

    comment = <string>; // A comment. Implementors should attach no special
                        // semantic meaning to this field.
  }

  sector
  {
    heightfloor   = <integer>; // Floor height. Default = 0.
    heightceiling = <integer>; // Ceiling height. Default = 0.

    texturefloor   = <string>; // Floor flat. No valid default.
    textureceiling = <string>; // Ceiling flat. No valid default.

    lightlevel = <integer>; // Light level. Default = 160.

    id = <integer>; // Sector tag. Default = 0.

    comment = <string>; // A comment. Implementors should attach no special
                        // semantic meaning to this field.
  }

  thing
  {
    x = <float>; // X coordinate. No valid default.
    y = <float>; // Y coordinate. No valid default.

    height = <float>; // Z height relative to floor. Default = 0.
                      // (Relative to ceiling for SPAWNCEILING items).

    angle = <integer>; // Map angle of thing in degrees. Default = 0 (East).

    type = <integer>; // DoomedNum. No valid default.

    // All flags default to false.
    skill1      = <bool>; // true = in skill 1.
    skill2      = <bool>; // true = in skill 2.
    skill3      = <bool>; // true = in skill 3.
    skill4      = <bool>; // true = in skill 4.
    skill5      = <bool>; // true = in skill 5.
    ambush      = <bool>; // true = thing is deaf.
    single      = <bool>; // true = in SP mode.
    dm          = <bool>; // true = in DM mode.
    coop        = <bool>; // true = in Coop.
    friend      = <bool>; // true = MBF friend.

    comment = <string>; // A comment. Implementors should attach no special
                        // semantic meaning to this field.
  }

===============================================================================
EOF
===============================================================================
