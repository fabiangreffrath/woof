name: build

on:
  push:
    branches: [ master ]
    tags-ignore: ['*']
    paths-ignore: ['**.md']
  pull_request:
    branches: [ master ]

env:
  VCPKG_ROOT: C:\vcpkg
  VCPKG_BINARY_SOURCES: "clear;nuget,GitHub,readwrite"
  NUGET_WRITE: ${{ secrets.NUGET_WRITE }}

jobs:
  linux64:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        compiler: [clang, gcc]

    steps:
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install libfluidsynth-dev libsdl2-dev libsdl2-mixer-dev libsdl2-net-dev ninja-build

      - uses: actions/checkout@v3

      - name: Configure
        env:
          CC: ${{ matrix.compiler }}
        run: cmake -B build -G "Ninja" -DENABLE_WERROR=ON

      - name: Build
        run: cmake --build build

      - name: Install
        run: |
          cd build
          ninja -v package

  cppcheck:
    runs-on: ubuntu-latest

    steps:
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install cppcheck

      - uses: actions/checkout@v3

      - name: Run cppcheck
        shell: bash
        run: |
          cppcheck --version ; cppcheck --error-exitcode=1 -j4 -q --force -U_WIN32 -Isrc opl src setup textscreen

  win64_msys2:
    runs-on: windows-latest

    defaults:
      run:
        shell: msys2 {0}

    steps:
      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: mingw64
          update: false
          install: >-
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-SDL2
            mingw-w64-x86_64-SDL2_mixer
            mingw-w64-x86_64-SDL2_net

      - uses: actions/checkout@v3

      - name: Configure
        run: cmake -B build -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DENABLE_WERROR=ON

      - name: Build
        run: cmake --build build

  win_msvc:
    runs-on: windows-latest
    environment: woof_environment

    strategy:
      matrix:
        arch: [x64, x86]

    steps:
      - uses: actions/checkout@v3

      - name: Setup vcpkg and NuGet
        shell: bash
        run: |
          set -euo pipefail
          cd ${{ env.VCPKG_ROOT }}
          ./bootstrap-vcpkg.sh -disableMetrics
          nuget=$(./vcpkg.exe fetch nuget | tail -n 1)
          owner="rfomin"
          source_url="https://nuget.pkg.github.com/$owner/index.json"
          "$nuget" sources add \
            -source "$source_url" \
            -storepasswordincleartext \
            -name "GitHub" \
            -username "$owner" \
            -password "${{ env.NUGET_WRITE }}"
          "$nuget" setapikey "${{ env.NUGET_WRITE }}" \
            -source "$source_url"

      - name: Setup devcmd
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}

      - name: Configure
        run: |
          cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DENABLE_WERROR=ON `
            -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake" `

      - name: Build
        run: cmake --build build

      - name: Package
        run: |
          cd build
          cpack -G ZIP

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Win-${{ matrix.arch }}
          path: build/*.zip
