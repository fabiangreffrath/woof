name: Continuous Integration

on:
  push:
    branches: [ master ]
    tags-ignore: ['*']
    paths-ignore: ['**.md']
  pull_request:
    branches: [ master ]
    paths-ignore: ['**.md']

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    defaults:
      run:
        shell: ${{ matrix.config.shell }}
    strategy:
      matrix:
        config:
          - {
              name: Linux GCC,
              os: ubuntu-latest,
              compiler: gcc,
              shell: bash,
            }
          - {
              name: Linux Clang,
              os: ubuntu-latest,
              compiler: clang,
              shell: bash,
            }
          - {
              name: MSYS2 UCRT64,
              os: windows-latest,
              compiler: gcc,
              shell: 'msys2 {0}',
              msystem: ucrt64,
              msys-env: mingw-w64-ucrt-x86_64,
            }

    steps:
      - name: Install dependencies (Linux)
        if: matrix.config.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install \
            libsdl2-dev \
            libsdl2-net-dev \
            libopenal-dev \
            libsndfile1-dev \
            libfluidsynth-dev \
            libxmp-dev \
            ninja-build

      - name: Install dependencies (MSYS2)
        if: matrix.config.shell == 'msys2 {0}'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.config.msystem }}
          update: false
          install: >-
            ${{ matrix.config.msys-env }}-gcc
            ${{ matrix.config.msys-env }}-cmake
            ${{ matrix.config.msys-env }}-ninja
            ${{ matrix.config.msys-env }}-SDL2
            ${{ matrix.config.msys-env }}-SDL2_net
            ${{ matrix.config.msys-env }}-openal
            ${{ matrix.config.msys-env }}-libsndfile
            ${{ matrix.config.msys-env }}-fluidsynth
            ${{ matrix.config.msys-env }}-libxmp

      - uses: actions/checkout@v3

      - name: Configure
        env:
          CC: ${{ matrix.config.compiler }}
        run: |
          cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release \
                -DENABLE_WERROR=ON -DENABLE_HARDENING=ON -DENABLE_LTO=ON

      - name: Build
        run: cmake --build build

      - name: Install
        run: |
          cd build
          cpack

  cppcheck:
    name: Cppcheck
    runs-on: ubuntu-latest

    steps:
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install cppcheck

      - uses: actions/checkout@v3

      - name: Run cppcheck
        shell: bash
        run: |
          cppcheck --version ; cppcheck --error-exitcode=1 -j4 -q --force -U_WIN32 -Isrc opl src setup textscreen
